/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCserver_TYPES_H
#define RPCserver_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace RPC {

class responseData;

typedef struct _responseData__isset {
  _responseData__isset() : isSuccess(false), webPage(false) {}
  bool isSuccess :1;
  bool webPage :1;
} _responseData__isset;

class responseData {
 public:

  responseData(const responseData&);
  responseData& operator=(const responseData&);
  responseData() : isSuccess(0), webPage() {
  }

  virtual ~responseData() throw();
  bool isSuccess;
  std::string webPage;

  _responseData__isset __isset;

  void __set_isSuccess(const bool val);

  void __set_webPage(const std::string& val);

  bool operator == (const responseData & rhs) const
  {
    if (!(isSuccess == rhs.isSuccess))
      return false;
    if (!(webPage == rhs.webPage))
      return false;
    return true;
  }
  bool operator != (const responseData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const responseData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(responseData &a, responseData &b);

inline std::ostream& operator<<(std::ostream& out, const responseData& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
