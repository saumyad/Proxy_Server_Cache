/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RPCserver_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace RPC {


responseData::~responseData() throw() {
}


void responseData::__set_isSuccess(const bool val) {
  this->isSuccess = val;
}

void responseData::__set_webPage(const std::string& val) {
  this->webPage = val;
}

uint32_t responseData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSuccess);
          this->__isset.isSuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->webPage);
          this->__isset.webPage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t responseData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("responseData");

  xfer += oprot->writeFieldBegin("isSuccess", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isSuccess);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("webPage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->webPage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(responseData &a, responseData &b) {
  using ::std::swap;
  swap(a.isSuccess, b.isSuccess);
  swap(a.webPage, b.webPage);
  swap(a.__isset, b.__isset);
}

responseData::responseData(const responseData& other0) {
  isSuccess = other0.isSuccess;
  webPage = other0.webPage;
  __isset = other0.__isset;
}
responseData& responseData::operator=(const responseData& other1) {
  isSuccess = other1.isSuccess;
  webPage = other1.webPage;
  __isset = other1.__isset;
  return *this;
}
void responseData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "responseData(";
  out << "isSuccess=" << to_string(isSuccess);
  out << ", " << "webPage=" << to_string(webPage);
  out << ")";
}

} // namespace
